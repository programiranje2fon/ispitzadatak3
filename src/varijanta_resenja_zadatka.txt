package masina.apstr;

import java.util.GregorianCalendar;

public abstract class MasinaZaCiscenjeSnega {
	
	private String markaIModel;
	private GregorianCalendar vremeServisa;
	
	public String getMarkaIModel() {
		return markaIModel;
	}
	
	public void setMarkaIModel(String markaIModel) {
		if (markaIModel==null || markaIModel.indexOf(' ')==-1)
			throw new RuntimeException("Marka i model ne smeju biti null i moraju sadrzati blanko znak");
			
		this.markaIModel = markaIModel;
	}
	
	public GregorianCalendar getVremeServisa() {
		return vremeServisa;
	}
	
	public void setVremeServisa(GregorianCalendar vremeServisa) {
		if (vremeServisa==null || !vremeServisa.after(new GregorianCalendar()))
			throw new RuntimeException("Vreme servisa ne sme biti null i mora se odnositi na buducnost");
		
		this.vremeServisa = vremeServisa;
	}

	public String toString() {
		return "MasinaZaCiscenjeSnega [markaIModel=" + markaIModel
				+ ", vremeServisa=" + vremeServisa + "]";
	}
	
	public abstract boolean servisiraj();
	

}

package masina;

import java.util.GregorianCalendar;

import masina.apstr.MasinaZaCiscenjeSnega;

public class Ratrak extends MasinaZaCiscenjeSnega {

	public boolean servisiraj() {
		if (getVremeServisa().before(new GregorianCalendar())){
			GregorianCalendar vremeServisa = getVremeServisa();
			
			//Novo vreme servisa se postavlja na godinu dana kasnije
			GregorianCalendar novoVremeServisa=new GregorianCalendar();
			novoVremeServisa.set(vremeServisa.get(GregorianCalendar.YEAR)+1,
								 vremeServisa.get(GregorianCalendar.MONTH),
								 vremeServisa.get(GregorianCalendar.DAY_OF_MONTH));
			
			setVremeServisa(novoVremeServisa);
			return true;
		}
		else return false;
	}

}

package masina;

import java.util.GregorianCalendar;

import masina.apstr.MasinaZaCiscenjeSnega;

public class Grtalica extends MasinaZaCiscenjeSnega {

	public boolean servisiraj() {
		if (getVremeServisa().before(new GregorianCalendar())){
			GregorianCalendar vremeServisa = getVremeServisa();
			
			//Novo vreme servisa se postavlja na godinu dana kasnije
			GregorianCalendar novoVremeServisa=new GregorianCalendar();
			novoVremeServisa.set(vremeServisa.get(GregorianCalendar.YEAR)+1,
								 vremeServisa.get(GregorianCalendar.MONTH),
								 vremeServisa.get(GregorianCalendar.DAY_OF_MONTH));
			
			setVremeServisa(novoVremeServisa);
			return true;
		}
		else return false;
	}

}

package masina.sluzba;

import java.io.FileWriter;
import java.io.PrintWriter;

import masina.apstr.MasinaZaCiscenjeSnega;
import masina.Ratrak;
import masina.Grtalica;

public class SluzbaZaPuteve {
	
	private MasinaZaCiscenjeSnega[] masine;
	
	public SluzbaZaPuteve(int kapacitet){
		if (kapacitet>0)
			masine = new MasinaZaCiscenjeSnega[kapacitet];
		else
			masine = new MasinaZaCiscenjeSnega[35];
	}
	
	public void unesiMasinu(MasinaZaCiscenjeSnega m) throws Exception{
		for (int i=0;i<masine.length;i++) {
			if (masine[i]==null){
				masine[i]=m;
				return;
			}
		}
		
		throw new Exception("U nizu nema mesta");
	}
	
	public void servisirajSveMasine(){
		try{
			PrintWriter out = new PrintWriter(new FileWriter("servis.txt"));
			
			//Prolazi se kroz niz i za svaku masinu koja nije null
			//i koja je servisirana (metoda servisiraj vraca tad true)
			//njeni podaci se upisuju u tekstualni fajl.
			for (int i = 0; i < masine.length; i++) {
				if (masine[i]!=null && masine[i].servisiraj())
					out.println(masine[i]);
			}
			
			out.close();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public MasinaZaCiscenjeSnega[] vratiMasine(){
		//Prvo treba prebrojati koliko u nizu masina ima
		//elemenata koji nisu null (brojac). To ce biti kapacitet
		//novog niza.
		int brojac = 0;
		for (int i = 0; i < masine.length; i++)
			if (masine[i]!=null) brojac++;
		
		//Inicijalizuje se novi niz ali tako da njegov kapacitet
		//bude jednak broju elemenata iz niza masina koji nisu null.
		//Brojac elemenata novog niza se postavlja na 0.
		MasinaZaCiscenjeSnega[] noviNiz = new MasinaZaCiscenjeSnega[brojac];
		brojac = 0;
		
		//Unosenje svih ratraka u niz od pocetka niza pa dokle se popuni
		for (int i = 0; i < masine.length; i++) 
			if (masine[i]!=null && (masine[i] instanceof Ratrak)){
				noviNiz[brojac]=masine[i];
				brojac++;
			}

		//Unosenje svih grtalica u niz na sva preostala mesta sve do kraja
		for (int i = 0; i < masine.length; i++) 
			if (masine[i]!=null && (masine[i] instanceof Grtalica)){
				noviNiz[brojac]=masine[i];
				brojac++;
			}
		
		return noviNiz;
	}
	

}

package ispravka_koda;

import java.util.Scanner;

public class UcitavanjeSaTastature3 {

	public static void ucitajIProveriNivenov() {
		Scanner s = new Scanner(System.in);
		try {
			while (true) {
				System.out.print("Unesite ceo broj:");
				int broj = s.nextInt();
				int pomocni = broj;
				int sumaCifara = 0;
				while (broj > 0) {
					sumaCifara = sumaCifara + broj % 10;
					broj = broj / 10;
				}
				if (pomocni % sumaCifara == 0)
					System.out.println("Jeste");
				else
					System.out.println("Nije");
			}
		} catch (Exception e) {
		}
	}
}

package test;

import ispravka_koda.UcitavanjeSaTastature3;

public class Test {
	public static void main(String[] args) {
		UcitavanjeSaTastature3.ucitajIProveriNivenov();
	}
}
